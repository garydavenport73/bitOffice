function _replaceReallCommmasInCSV(contents,commaReplacement){let newContents="";let inside=-1;for(let i=0;i<contents.length;i++){let thisChar=contents.charAt(i);if(thisChar==='"'){inside=inside*-1;newContents+=thisChar;}
else if(thisChar===","){if(inside===-1){newContents+=commaReplacement;}
else{newContents+=thisChar;}}
else{newContents+=thisChar;}}
return(newContents);}
function _replaceRealNewlinesInCSV(contents,newLineReplacement){let newContents="";let inside=-1;for(let i=0;i<contents.length;i++){let thisChar=contents.charAt(i);if(thisChar==='"'){inside=inside*-1;newContents+=thisChar;}
else if(thisChar==="\n"){if(inside===-1){newContents+=newLineReplacement;}
else{newContents+=thisChar;}}
else{newContents+=thisChar;}}
return(newContents);}
function _replaceRealCommasAndRealNewlinesInCSV(contents,commaReplacement,newlineReplacement){let newContents="";let inside=-1;for(let i=0;i<contents.length;i++){let thisChar=contents.charAt(i);if(thisChar==='"'){inside=inside*-1;newContents+=thisChar;}
else if(thisChar===","){if(inside===-1){newContents+=commaReplacement;}
else{newContents+=thisChar;}}
else if(thisChar==="\n"){if(inside===-1){newContents+=newlineReplacement;}
else{newContents+=thisChar;}}
else{newContents+=thisChar;}}
return(newContents);}
function tokenMaker(intSize){let token="";let specialString="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";for(let i=0;i<intSize;i++){token+=specialString[Math.floor(Math.random()*specialString.length)];}
return token;}
function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');}
function myReplaceAll(str,match,replacement){return str.replace(new RegExp(escapeRegExp(match),'g'),()=>replacement);}
function getTokenNotInString(myString,intSize=16){let token=tokenMaker(16);while(myString.indexOf(token)!==-1){token=tokenMaker(16);}
return token;}
function csvToArrays(CSVString){CSVString=CSVString.trim();let carriageReturnToken=getTokenNotInString(CSVString);CSVString=CSVString.split("\r").join(carriageReturnToken);CSVString=CSVString.split(carriageReturnToken+"\n").join("\n");let myArray=[];CSVString=CSVString.trim();let commaToken=getTokenNotInString(CSVString);CSVString=_replaceReallCommmasInCSV(CSVString,commaToken);let newlineToken=getTokenNotInString(CSVString);CSVString=_replaceRealNewlinesInCSV(CSVString,newlineToken);let lines=CSVString.split(newlineToken);for(let i=0;i<lines.length;i++){let rowArray=lines[i].split(commaToken);for(let j=0;j<rowArray.length;j++){if(rowArray[j][rowArray[j].length-1]==='"'){rowArray[j]=rowArray[j].slice(0,rowArray[j].length-1);}
if(rowArray[j][0]==='"'){rowArray[j]=rowArray[j].slice(1,rowArray[j].length);}
rowArray[j]=rowArray[j].split('""').join('"');}
myArray.push(rowArray);}
return myArray;}
function arraysToCSV(arrayOfArrays,newLineString="\n"){let CSVString="";for(let i=0;i<arrayOfArrays.length;i++){for(let j=0;j<arrayOfArrays[i].length;j++){CSVString+='"';CSVString+=arrayOfArrays[i][j].split('"').join('""');CSVString+='",'}
CSVString=CSVString.slice(0,-1)+newLineString;}
CSVString=CSVString.slice(0,-(newLineString.length));return CSVString;}
function arraysToJSON(arrayOfArrays,usingHeaders=true){let headers=[];let data=[];let table={};if(usingHeaders===true){for(let i=0;i<arrayOfArrays[0].length;i++){let header=arrayOfArrays[0][i];let index=0;while(headers.includes(header)){console.log("WARNING - Duplicate header found: "+header);index+=1;header=header+index.toString();console.log("Attempting rename to: "+header);}
headers.push(header);}}else{for(let i=0;i<arrayOfArrays[0].length;i++){headers.push("header"+i.toString());}}
if(usingHeaders===true){startRow=1;}
else{startRow=0;}
for(let i=startRow;i<arrayOfArrays.length;i++){let tempRow={};for(let j=0;j<headers.length;j++){tempRow[headers[j]]=arrayOfArrays[i][j];}
data.push(tempRow);}
table["headers"]=headers;table["data"]=data;return(table);}
function JSONToArrays(jsonObject,includeHeaders=true){let headers=jsonObject["headers"];let data=jsonObject["data"];let arrayOfArrays=[];if(includeHeaders===true){let row=[];for(let i=0;i<headers.length;i++){row.push(headers[i].toString());}
arrayOfArrays.push(row);}
for(i=0;i<data.length;i++){let row=[];for(let j=0;j<headers.length;j++){if(data[i][headers[j]]===undefined){row.push("");}
else{row.push(data[i][headers[j]].toString());}}
arrayOfArrays.push(row);}
return(arrayOfArrays);}
function unorderedJSONToArrays(jsonObject,includeHeaders=true){let newObject={};newObject["data"]=jsonObject;let headers=[];for(rowObject of jsonObject){for(const key in rowObject){if(!headers.includes(key)){headers.push(key.toString());};}}
newObject["headers"]=headers;return JSONToArrays(newObject,includeHeaders);}
function csvToJSON(csvString,usingHeaders=true){let arrays=csvToArrays(csvString);console.log(arrays);let jsonObject=arraysToJSON(arrays,usingHeaders);return jsonObject;}
function JSONToCSV(jsonObject,includeHeaders=true,newLineString="\n"){let arrays=JSONToArrays(jsonObject,includeHeaders);let csvString=arraysToCSV(arrays,newLineString);return csvString;}
function unorderedJSONToCSV(jsonObject,includeHeaders=true){let arrays=unorderedJSONToArrays(jsonObject,includeHeaders);let csvString=arraysToCSV(arrays);return csvString;}